\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/*}
\PYG{c+cm}{    ================================================================================}
\PYG{c+cm}{    Tutorial: Recursion \PYGZhy{} Sum of Digits}
\PYG{c+cm}{    ================================================================================}

\PYG{c+cm}{    This program calculates the sum of the digits of an integer using a very}
\PYG{c+cm}{    elegant recursive solution. This is a great example of thinking about a}
\PYG{c+cm}{    problem in a recursive way.}

\PYG{c+cm}{    The core idea is to recognize that the sum of digits of a number (e.g., 123)}
\PYG{c+cm}{    is equal to `(the last digit) + (the sum of digits of the rest of the number)`.}
\PYG{c+cm}{    sum(123) = 3 + sum(12)}
\PYG{c+cm}{    sum(12)  = 2 + sum(1)}
\PYG{c+cm}{    sum(1)   = 1 + sum(0)}

\PYG{c+cm}{    This pattern leads directly to a recursive solution.}

\PYG{c+cm}{    Concepts Covered:}
\PYG{c+cm}{    \PYGZhy{} A non\PYGZhy{}obvious but elegant application of recursion.}
\PYG{c+cm}{    \PYGZhy{} Using the modulo (\PYGZpc{}) and division (/) operators to decompose a number.}
\PYG{c+cm}{*/}

\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}stdio.h\PYGZgt{}}

\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n+nf}{sumOfDigits}\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{n}\PYG{p}{);}

\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n+nf}{main}\PYG{p}{(}\PYG{k+kt}{void}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{n}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sum}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{printf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Enter an integer to sum its digits: \PYGZdq{}}\PYG{p}{);}
\PYG{+w}{    }\PYG{n}{scanf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}\PYGZpc{}d\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{n}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+c1}{// Let\PYGZsq{}s handle negative numbers gracefully.}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{input\PYGZus{}num}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{n}\PYG{p}{;}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{n}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{n}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{\PYGZhy{}}\PYG{n}{n}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Work with the positive version for the calculation.}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{n}{sum}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sumOfDigits}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}

\PYG{+w}{    }\PYG{n}{printf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}The sum of the digits of \PYGZpc{}d is \PYGZpc{}d.}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s}{\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{input\PYGZus{}num}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sum}\PYG{p}{);}

\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/*}
\PYG{c+cm}{    Function: sumOfDigits}
\PYG{c+cm}{    Purpose: Recursively calculates the sum of the digits of an integer.}
\PYG{c+cm}{*/}
\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n+nf}{sumOfDigits}\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{n}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{c+c1}{// Base Case: If the number is 0, the sum of its digits is 0.}
\PYG{+w}{    }\PYG{c+c1}{// This stops the recursion.}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{n}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{c+c1}{// Recursive Step:}
\PYG{+w}{    }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{c+c1}{// Here\PYGZsq{}s the mathematical trick:}
\PYG{+w}{        }\PYG{c+c1}{// 1. `n \PYGZpc{} 10` (modulo 10) gives you the last digit of the number.}
\PYG{+w}{        }\PYG{c+c1}{//    (e.g., 123 \PYGZpc{} 10 is 3)}
\PYG{+w}{        }\PYG{c+c1}{// 2. `n / 10` (integer division by 10) effectively removes the last digit.}
\PYG{+w}{        }\PYG{c+c1}{//    (e.g., 123 / 10 is 12)}

\PYG{+w}{        }\PYG{c+c1}{// We return the last digit PLUS the sum of the digits of the rest of the number.}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{n}\PYG{+w}{ }\PYG{o}{\PYGZpc{}}\PYG{+w}{ }\PYG{l+m+mi}{10}\PYG{p}{)}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n}{sumOfDigits}\PYG{p}{(}\PYG{n}{n}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{l+m+mi}{10}\PYG{p}{);}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/*}
\PYG{c+cm}{    How does sumOfDigits(123) work?}
\PYG{c+cm}{    \PYGZhy{} It returns 3 + sumOfDigits(12)}
\PYG{c+cm}{      \PYGZhy{} which returns 2 + sumOfDigits(1)}
\PYG{c+cm}{        \PYGZhy{} which returns 1 + sumOfDigits(0)}
\PYG{c+cm}{          \PYGZhy{} which returns 0 (Base Case!)}
\PYG{c+cm}{    The results are then added back up the chain: 1 + 0 = 1 \PYGZhy{}\PYGZgt{} 2 + 1 = 3 \PYGZhy{}\PYGZgt{} 3 + 3 = 6.}
\PYG{c+cm}{*/}

\end{Verbatim}
