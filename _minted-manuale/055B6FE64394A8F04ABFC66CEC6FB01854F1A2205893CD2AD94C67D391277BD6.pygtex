\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/*}
\PYG{c+cm}{    ================================================================================}
\PYG{c+cm}{    Tutorial: Strings \PYGZhy{} Finding the Longest Word}
\PYG{c+cm}{    ================================================================================}

\PYG{c+cm}{    This program reads a specified number of words from the user and finds the}
\PYG{c+cm}{    length of the longest word among them.}

\PYG{c+cm}{    This is a common string processing task that combines loops, string handling,}
\PYG{c+cm}{    and a max\PYGZhy{}finding algorithm.}

\PYG{c+cm}{    Concepts Covered:}
\PYG{c+cm}{    \PYGZhy{} Reading strings from input.}
\PYG{c+cm}{    \PYGZhy{} Using `strlen()` to get the length of a string.}
\PYG{c+cm}{    \PYGZhy{} The algorithm for finding a maximum value, applied to string lengths.}
\PYG{c+cm}{*/}

\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}stdio.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}string.h\PYGZgt{}}\PYG{c+c1}{ // We need this header for the strlen() function.}

\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n+nf}{main}\PYG{p}{(}\PYG{k+kt}{void}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{num\PYGZus{}words}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{c+c1}{// This buffer will hold each word as we read it.}
\PYG{+w}{    }\PYG{c+c1}{// Size 101 can hold a 100\PYGZhy{}character word plus the null terminator.}
\PYG{+w}{    }\PYG{k+kt}{char}\PYG{+w}{ }\PYG{n}{current\PYGZus{}word}\PYG{p}{[}\PYG{l+m+mi}{101}\PYG{p}{];}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{max\PYGZus{}length\PYGZus{}so\PYGZus{}far}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}

\PYG{+w}{    }\PYG{n}{printf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}How many words will you enter? \PYGZdq{}}\PYG{p}{);}
\PYG{+w}{    }\PYG{n}{scanf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}\PYGZpc{}d\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{num\PYGZus{}words}\PYG{p}{);}

\PYG{+w}{    }\PYG{n}{printf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Please enter \PYGZpc{}d words:}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s}{\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{num\PYGZus{}words}\PYG{p}{);}

\PYG{+w}{    }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{num\PYGZus{}words}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{i}\PYG{o}{++}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{scanf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}\PYGZpc{}s\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{current\PYGZus{}word}\PYG{p}{);}

\PYG{+w}{        }\PYG{c+c1}{// Use the standard strlen() function to get the length of the word just read.}
\PYG{+w}{        }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{current\PYGZus{}length}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{strlen}\PYG{p}{(}\PYG{n}{current\PYGZus{}word}\PYG{p}{);}

\PYG{+w}{        }\PYG{c+c1}{// This is the standard max\PYGZhy{}finding algorithm.}
\PYG{+w}{        }\PYG{c+c1}{// If the length of the new word is greater than the max we\PYGZsq{}ve seen so far...}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{current\PYGZus{}length}\PYG{+w}{ }\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{max\PYGZus{}length\PYGZus{}so\PYGZus{}far}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{c+c1}{// ...then we have a new maximum!}
\PYG{+w}{            }\PYG{n}{max\PYGZus{}length\PYGZus{}so\PYGZus{}far}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{current\PYGZus{}length}\PYG{p}{;}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{n}{printf}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}The length of the longest word entered is: \PYGZpc{}d}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s}{\PYGZdq{}}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{max\PYGZus{}length\PYGZus{}so\PYGZus{}far}\PYG{p}{);}

\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/*}
\PYG{c+cm}{    ================================================================================}
\PYG{c+cm}{    Further Exploration:}
\PYG{c+cm}{    ================================================================================}
\PYG{c+cm}{    1.  This program only tells you the *length* of the longest word, but not}
\PYG{c+cm}{        what the word itself is. Can you modify it to store the longest word?}
\PYG{c+cm}{        You would need another character array, maybe `char longest\PYGZus{}word[101];`,}
\PYG{c+cm}{        and inside the `if` block, you would use the `strcpy()` function (also}
\PYG{c+cm}{        from `\PYGZlt{}string.h\PYGZgt{}`) to copy the `current\PYGZus{}word` into `longest\PYGZus{}word`.}
\PYG{c+cm}{    2.  What if two words have the same, maximum length? The current program}
\PYG{c+cm}{        correctly reports their length. The modification in \PYGZsh{}1 would only store}
\PYG{c+cm}{        the *first* longest word it finds. How could you change it to store the}
\PYG{c+cm}{        *last* longest word?}
\PYG{c+cm}{    ================================================================================}
\PYG{c+cm}{*/}

\end{Verbatim}
